//
// build.gradle in TeamCode
//
// Most of the definitions for building your module reside in a common, shared
// file 'build.common.gradle'. Being factored in this way makes it easier to
// integrate updates to the FTC into your code. If you really need to customize
// the build definitions, you can place those customizations in this file, but
// please think carefully as to whether such customizations are really necessary
// before doing so.


// Custom definitions may go here

// Include common definitions from above.
apply from: '../build.common.gradle'
apply from: '../build.dependencies.gradle'

apply plugin: 'org.mozilla.rust-android-gradle.rust-android'

dependencies {
    implementation project(':FtcRobotController')
    annotationProcessor files('lib/OpModeAnnotationProcessor.jar')

    implementation 'com.acmerobotics.roadrunner:core:0.5.2'
    implementation 'com.acmerobotics.dashboard:dashboard:0.3.10'

    implementation "org.joml:joml:1.10.1"

    implementation 'org.openftc:easyopencv:1.4.4'
    implementation 'org.openftc:rev-extensions-2:1.2'

    implementation "org.apache.commons:commons-math3:3.6.1"

    implementation "com.noahbres.jotai:jotai:1.0.2"
    implementation "com.spartronics4915.lib:ftc265:2.1.9"
}

// Add our native code
cargo {
    module  =  "../ProjectTomato"
    libname = "tomato"
    targets = ["arm"]

    exec { spec, toolchain ->
        def openCVRoot = new File(project.rootProject.projectDir, "ProjectTomato/OpenCV-Repackaged/doc/")
        spec.environment("OPENCV_LINK_LIBS", "libOpenCvNative")
        spec.environment("OPENCV_LINK_PATHS", openCVRoot.getAbsolutePath())
        spec.environment("OPENCV_INCLUDE_PATHS", new File(openCVRoot, "native_headers").getAbsolutePath())
        spec.environment("OPENCV_CLANG_TARGET", "armv7a-unknown-linux-android$android.defaultConfig.minSdkVersion.mApiLevel")
    }
}

tasks.whenTaskAdded {
    if ((it.name == 'javaPreCompileDebug' || it.name == 'javaPreCompileRelease')) {
        it.dependsOn 'cargoBuild'
    }
}
